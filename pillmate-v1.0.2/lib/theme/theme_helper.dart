import 'package:flutter/material.dart';
import '../../core/app_export.dart';

String _appTheme = "primary";

/// Helper class for managing themes and colors.
class ThemeHelper {
  // A map of custom color themes supported by the app
  Map<String, PrimaryColors> _supportedCustomColor = {'primary': PrimaryColors()};

  // A map of color schemes supported by the app
  Map<String, ColorScheme> _supportedColorScheme = {'primary': ColorSchemes.primaryColorScheme};

  /// Changes the app theme to [_newTheme].
  void changeTheme(String _newTheme) {
    _appTheme = _newTheme;
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors _getThemeColors() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedCustomColor.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    return _supportedCustomColor[_appTheme] ?? PrimaryColors();
  }

  /// Returns the current theme data.
  ThemeData _getThemeData() {
    //throw exception to notify given theme is not found or not generated by the generator
    if (!_supportedColorScheme.containsKey(_appTheme)) {
      throw Exception(
          "$_appTheme is not found.Make sure you have added this theme class in JSON Try running flutter pub run build_runner");
    }
    //return theme from map

    var colorScheme = _supportedColorScheme[_appTheme] ?? ColorSchemes.primaryColorScheme;
    return ThemeData(
      visualDensity: VisualDensity.standard,
      colorScheme: colorScheme,
      textTheme: TextThemes.textTheme(colorScheme),
      scaffoldBackgroundColor: appTheme.grey900,
      elevatedButtonTheme: ElevatedButtonThemeData(
          style: ElevatedButton.styleFrom(
              backgroundColor: appTheme.cyan500,
              shape: RoundedRectangleBorder(borderRadius: BorderRadius.circular(22.h)),
              visualDensity: const VisualDensity(vertical: -4, horizontal: -4),
              padding: EdgeInsets.zero)),
      radioTheme: RadioThemeData(
          fillColor: MaterialStateColor.resolveWith((states) {
            if (states.contains(MaterialState.selected)) {
              return appTheme.cyan500;
            }
            return colorScheme.onSurface;
          }),
          visualDensity: const VisualDensity(vertical: -4, horizontal: -4)),
      dividerTheme: DividerThemeData(thickness: 11, space: 11, color: appTheme.grey900),
      appBarTheme: AppBarTheme(
        centerTitle: true,
        titleTextStyle: TextThemes.textTheme(colorScheme).titleMedium,
        backgroundColor: Colors.transparent,
      ),
      cardColor: _supportedCustomColor[_appTheme]?.grey700,
      textButtonTheme: TextButtonThemeData(
        style: TextButton.styleFrom(
          foregroundColor: appTheme.cyan500,
          shape: RoundedRectangleBorder(
            borderRadius: BorderRadius.circular(4), // Rounded Corners for Button
          ),
          padding: EdgeInsets.symmetric(vertical: 8.0, horizontal: 16.0), // Button Padding
        ),
      ),

      inputDecorationTheme: InputDecorationTheme(
        enabledBorder: OutlineInputBorder(
          borderSide: BorderSide(color: appTheme.grey500),
          borderRadius: BorderRadius.circular(8.0),
        ),
        border: OutlineInputBorder(
          borderSide: BorderSide(color: appTheme.grey500),
          borderRadius: BorderRadius.circular(8.0),
        ),
        focusedBorder: OutlineInputBorder(
          borderSide: BorderSide(color: appTheme.cyan500, width: 2.0),
          borderRadius: BorderRadius.circular(8.0),
        ),
        labelStyle: TextStyle(color: appTheme.cyan500),
        hintStyle: TextStyle(color: appTheme.grey500),
      ),
      // useMaterial3: true
    );
  }

  /// Returns the primary colors for the current theme.
  PrimaryColors themeColor() => _getThemeColors();

  /// Returns the current theme data.
  ThemeData themeData() => _getThemeData();
}

/// Class containing the supported text theme styles.
class TextThemes {
  static TextTheme textTheme(ColorScheme colorScheme) => TextTheme(
        bodyLarge:
            TextStyle(color: appTheme.whiteA700, fontSize: 18.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w400),
        bodyMedium:
            TextStyle(color: appTheme.teal500, fontSize: 14.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w400),
        bodySmall:
            TextStyle(color: appTheme.whiteA700, fontSize: 10.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w400),
        displaySmall:
            TextStyle(color: Color(0XFFFFFFFF), fontSize: 36.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w400),
        headlineLarge:
            TextStyle(color: appTheme.grey900, fontSize: 33.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w700),
        headlineSmall:
            TextStyle(color: appTheme.whiteA700, fontSize: 24.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w500),
        labelLarge:
            TextStyle(color: appTheme.teal500, fontSize: 13.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w500),
        labelMedium:
            TextStyle(color: appTheme.teal500, fontSize: 10.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w500),
        labelSmall:
            TextStyle(color: appTheme.grey500, fontSize: 9.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w700),
        titleLarge:
            TextStyle(color: appTheme.whiteA700, fontSize: 22.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w400),
        titleMedium:
            TextStyle(color: appTheme.whiteA700, fontSize: 18.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w500),
        titleSmall:
            TextStyle(color: appTheme.whiteA700, fontSize: 14.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w500),
        displayMedium:
            TextStyle(color: appTheme.grey100, fontSize: 20.fSize, fontFamily: 'Roboto', fontWeight: FontWeight.w400),
      );
}

/// Class containing the supported color schemes.
class ColorSchemes {
  static final primaryColorScheme = ColorScheme.light();
}

class PrimaryColors {
  Color get black900 => HSLColor.fromAHSL(1.0, 0, 0.0, 0.0).toColor(); //
  Color get black100 => HSLColor.fromAHSL(1.0, 0, 0.0, 0.05).toColor(); //

  Color get cyan900 => HSLColor.fromAHSL(1.0, 180, 0.7, 0.27).toColor(); //
  Color get cyan500 => HSLColor.fromAHSL(1.0, 180, 0.7, 0.47).toColor(); //
  Color get cyan100 => HSLColor.fromAHSL(1.0, 180, 0.7, 0.67).toColor(); //

  Color get teal900 => HSLColor.fromAHSL(1.0, 180, 0.85, 0.5).toColor(); //
  Color get teal500 => HSLColor.fromAHSL(1.0, 180, 0.85, 0.7).toColor(); //
  Color get teal100 => HSLColor.fromAHSL(1.0, 180, 0.85, 0.9).toColor(); //

  // Purple
  Color get purple900 => HSLColor.fromAHSL(1.0, 270, 0.7, 0.3).toColor(); //
  Color get purple700 => HSLColor.fromAHSL(0.3, 270, 0.7, 0.3).toColor(); //
  Color get purple500 => HSLColor.fromAHSL(1.0, 270, 0.7, 0.5).toColor(); //
  Color get purple100 => HSLColor.fromAHSL(1.0, 280, 0.7, 0.9).toColor(); //

  Color get grey900 => HSLColor.fromAHSL(1.0, 220, 0.45, 0.08).toColor(); //
  Color get grey700 => HSLColor.fromAHSL(0.5, 200, 0.45, 0.15).toColor(); //
  Color get grey500 => HSLColor.fromAHSL(1.0, 220, 0.45, 0.28).toColor(); //
  Color get grey300 => HSLColor.fromAHSL(1.0, 220, 0.45, 0.5).toColor(); //
  Color get grey100 => HSLColor.fromAHSL(1.0, 220, 0.6, 0.80).toColor(); //

  Color get whiteA700 => HSLColor.fromAHSL(1.0, 0, 0.0, 1.0).toColor(); //
  Color get white100 => HSLColor.fromAHSL(1.0, 0, 0.0, 0.95).toColor(); //

  Color get background100 => HSLColor.fromAHSL(1.0, 0, 0.0, 0.98).toColor(); //
}

PrimaryColors get appTheme => ThemeHelper().themeColor();

ThemeData get theme => ThemeHelper().themeData();
